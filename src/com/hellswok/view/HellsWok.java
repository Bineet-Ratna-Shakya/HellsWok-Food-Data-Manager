/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.hellswok.view;

import com.hellswok.util.StringUtil;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.hellswok.controller.BinarySearch;
import com.hellswok.controller.InsertionSort;
import com.hellswok.controller.MergeSort;
import com.hellswok.model.HellsWokModel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 *
 * @author soul
 */
public class HellsWok extends javax.swing.JFrame {

    ArrayList<HellsWokModel> searchList = new ArrayList<>();

    private void validateInput(String fieldName, String value, String regex,
            String errorMessage) {
        if (value == null || value.trim().isEmpty()) {
            throw new IllegalArgumentException
        (fieldName + StringUtil.VALIDATION_EXCEPTION);
        } else if (!value.matches(regex)) {
            throw new IllegalArgumentException(errorMessage);
        }
    }

    /**
     * Creates new form HellsWok
     */
    public HellsWok() {

        initComponents();
        mainPanel.setVisible(false);
        welcomePanel.setVisible(true);
        welcomePanel.setBounds(0, 0, 1920, 1080);
        addFoodPanel.setVisible(false);
        deleteFoodPanel.setVisible(false);
        addFoodPanel.setBounds(0, 0, 1920, 1080);
        updateFoodPanel.setVisible(false);

        for (int i = 0; i < dataTable.getRowCount(); i++) {
            int sno = Integer.parseInt
                (dataTable.getValueAt(i, 0).toString());
            String foodName = dataTable.getValueAt(i, 1).toString();
            String foodGroup = dataTable.getValueAt(i, 2).toString();
            //String calories = DataTable.getValueAt(i, 3).toString();
            int calories = Integer.parseInt
                (dataTable.getValueAt(i, 3).toString());
            String servingSize = dataTable.getValueAt(i, 4).toString();
            //String price = DataTable.getValueAt(i, 5).toString
            int price = Integer.parseInt
                (dataTable.getValueAt(i, 5).toString());
            String country = dataTable.getValueAt(i, 6).toString();
            String vegNonVeg = dataTable.getValueAt(i, 7).toString();

            HellsWokModel model = new HellsWokModel(sno, foodName, 
                    foodGroup, calories, servingSize, price, 
                    country, vegNonVeg);
            searchList.add(model);

        }
        for (HellsWokModel food : searchList) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        navigatorPanel = new javax.swing.JPanel();
        updatedataLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        tablePanel = new javax.swing.JPanel();
        tableScrollPane = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        mainHeaderPanel = new javax.swing.JPanel();
        logoImageLabel = new javax.swing.JLabel();
        headerLabel = new javax.swing.JLabel();
        searchLabel = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        mainSortPanel = new javax.swing.JPanel();
        sortSearchLabel = new javax.swing.JLabel();
        titleSortComboBox = new javax.swing.JComboBox<>();
        sortTypeComboBox = new javax.swing.JComboBox<>();
        sortButton = new javax.swing.JButton();
        mainBgimgLabel = new javax.swing.JLabel();
        welcomePanel = new javax.swing.JPanel();
        welcomePanel2 = new javax.swing.JPanel();
        welcomeButton = new javax.swing.JButton();
        welcomeLabel = new javax.swing.JLabel();
        welcomeBgimgLabel = new javax.swing.JLabel();
        addFoodPanel = new javax.swing.JPanel();
        addFoodHeadingLabel = new javax.swing.JLabel();
        addFoodInputPanel = new javax.swing.JPanel();
        servingSizeLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        foodNameLabel = new javax.swing.JLabel();
        foodGroupLabel = new javax.swing.JLabel();
        caloriesLabel = new javax.swing.JLabel();
        countryLabel = new javax.swing.JLabel();
        foodNameTextField = new javax.swing.JTextField();
        foodGroupTextFeild = new javax.swing.JTextField();
        caloriesTextField = new javax.swing.JTextField();
        servingSizeTextField = new javax.swing.JTextField();
        priceTextField = new javax.swing.JTextField();
        vegNonVegLabel = new javax.swing.JLabel();
        countryTextField = new javax.swing.JTextField();
        vegRadioButton = new javax.swing.JRadioButton();
        nonVegRadioButton = new javax.swing.JRadioButton();
        addFoodButton = new javax.swing.JButton();
        addFoodBackButton = new javax.swing.JButton();
        addFoodBgimgLabel = new javax.swing.JLabel();
        updateFoodPanel = new javax.swing.JPanel();
        updateFoodHeadingLabel = new javax.swing.JLabel();
        updateFoodSubHeadingLabel = new javax.swing.JLabel();
        updateFoodSnoTextField = new javax.swing.JTextField();
        updateFoodSnoButton = new javax.swing.JButton();
        updateFoodInputPanel = new javax.swing.JPanel();
        updateFoodNameTextField = new javax.swing.JTextField();
        updateFoodGroupTextField = new javax.swing.JTextField();
        updateCaloriesTextField = new javax.swing.JTextField();
        updatePriceTextField = new javax.swing.JTextField();
        updateServingSizeTextField = new javax.swing.JTextField();
        updateCountryTextField = new javax.swing.JTextField();
        updateVegNonvegTextField = new javax.swing.JTextField();
        updateVegNonvegLabel = new javax.swing.JLabel();
        updateFoodNameLabel = new javax.swing.JLabel();
        updateFoodGroupLabel = new javax.swing.JLabel();
        updateCaloriesLabel = new javax.swing.JLabel();
        updatePriceLabel = new javax.swing.JLabel();
        updateServingSizeLabel = new javax.swing.JLabel();
        updateCountryLabel = new javax.swing.JLabel();
        updateFoodDataButton = new javax.swing.JButton();
        updateBackButton = new javax.swing.JButton();
        updateBgimgLabel = new javax.swing.JLabel();
        deleteFoodPanel = new javax.swing.JPanel();
        deleteFoodInputPanel = new javax.swing.JPanel();
        deleteFoodHeadingLabel = new javax.swing.JLabel();
        deleteFoodButton = new javax.swing.JButton();
        deleteFoodNameTextField = new javax.swing.JTextField();
        deleteFoodSnoTextField = new javax.swing.JTextField();
        deleteFoodSnoLabel = new javax.swing.JLabel();
        deleteFoodNameLabel = new javax.swing.JLabel();
        deleteFoodBackButton = new javax.swing.JButton();
        deleteFoodBgimgLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setPreferredSize(new java.awt.Dimension(1920, 1080));
        getContentPane().setLayout(null);

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setPreferredSize(new java.awt.Dimension(1920, 1080));
        mainPanel.setLayout(null);

        navigatorPanel.setBackground(new java.awt.Color(0, 0, 0));

        updatedataLabel.setBackground(new java.awt.Color(0, 0, 0));
        updatedataLabel.setFont(new java.awt.Font("Shree Devanagari 714", 0, 36)); // NOI18N
        updatedataLabel.setForeground(new java.awt.Color(255, 255, 255));
        updatedataLabel.setText("Update Data");

        addButton.setBackground(new java.awt.Color(255, 153, 153));
        addButton.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 24)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("Add Food");
        addButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        addButton.setContentAreaFilled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(255, 153, 153));
        updateButton.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 1, 24)); // NOI18N
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setText("Update Food");
        updateButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        updateButton.setContentAreaFilled(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        removeButton.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 1, 24)); // NOI18N
        removeButton.setForeground(new java.awt.Color(255, 255, 255));
        removeButton.setText("Remove Food");
        removeButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        removeButton.setContentAreaFilled(false);
        removeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        tablePanel.setBackground(new java.awt.Color(0, 0, 0));
        tablePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        dataTable.setFont(new java.awt.Font("Baskerville", 0, 13)); // NOI18N
        dataTable.setForeground(new java.awt.Color(0, 0, 0));
        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "Grilled Salmon", "Seafood", "300", "6oz", "30", "USA", "Non-Veg"},
                {"2", "Lobster Thermidor", "Seafood", "500", "1 lb", "60", "France", "Non-Veg"},
                {"3", "Truffle Risotto", "Vegetarian", "350", "10oz", "40", "Italy", "Veg"},
                {"4", "Wagyu Beef Sushi", "Meat", "350", "8 pc", "120", "Japan", "Non-Veg"},
                {"5", "Caviar Platter", "Seafood", "250", "2 oz", "150", "Russia", "Non-Veg"},
                {"6", "Vegetable Tempura", "Vegetarian", "320", "8 pc", "20", "Japan", "Veg"},
                {"7", "Butter Chicken", "Poultry", "400", "10oz", "35", "India", "Non-Veg"},
                {"8", "Tofu Stir-fry", "Vegetarian", "250", "10oz", "35", "Japan", "Veg"},
                {"9", "Filet Mignon", "Meat", "400", "8 oz", "45", "Argentina", "Non-Veg"},
                {"10", "Palak Paneer", "Vegetarian", "300", "12 oz", "30", "India", "Veg"}
            },
            new String [] {
                "S.No", "Food Name", "Food Group", "Calories (kcal)", "Serving Size", "Price (USD)", "Country of Origin", "Veg/Non-Veg"
            }
        ));
        dataTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dataTable.setEnabled(false);
        dataTable.setGridColor(new java.awt.Color(0, 0, 0));
        dataTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        dataTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        dataTable.setShowGrid(false);
        dataTable.getTableHeader().setReorderingAllowed(false);
        tableScrollPane.setViewportView(dataTable);

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1119, Short.MAX_VALUE)
                .addContainerGap())
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout navigatorPanelLayout = new javax.swing.GroupLayout(navigatorPanel);
        navigatorPanel.setLayout(navigatorPanelLayout);
        navigatorPanelLayout.setHorizontalGroup(
            navigatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navigatorPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(navigatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updatedataLabel)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        navigatorPanelLayout.setVerticalGroup(
            navigatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navigatorPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(navigatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(navigatorPanelLayout.createSequentialGroup()
                        .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(navigatorPanelLayout.createSequentialGroup()
                        .addComponent(updatedataLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        mainPanel.add(navigatorPanel);
        navigatorPanel.setBounds(10, 260, 1450, 267);

        mainHeaderPanel.setBackground(new java.awt.Color(229, 228, 226));
        mainHeaderPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 51), 2));

        logoImageLabel.setBackground(new java.awt.Color(255, 255, 255));
        logoImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logoImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hellswok/resources/logo.png"))); // NOI18N

        headerLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 1, 100)); // NOI18N
        headerLabel.setForeground(new java.awt.Color(0, 0, 0));
        headerLabel.setText("Hells Wok");

        searchLabel.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 36)); // NOI18N
        searchLabel.setForeground(new java.awt.Color(0, 0, 0));
        searchLabel.setText("Search Food");

        searchTextField.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 18)); // NOI18N
        searchTextField.setForeground(new java.awt.Color(0, 0, 0));
        searchTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchTextField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        searchTextField.setOpaque(true);
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hellswok/resources/mainPanelSearchIcon.png"))); // NOI18N
        searchButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainHeaderPanelLayout = new javax.swing.GroupLayout(mainHeaderPanel);
        mainHeaderPanel.setLayout(mainHeaderPanelLayout);
        mainHeaderPanelLayout.setHorizontalGroup(
            mainHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainHeaderPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(logoImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(109, 109, 109)
                .addComponent(searchLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchButton)
                .addContainerGap(5022, Short.MAX_VALUE))
        );
        mainHeaderPanelLayout.setVerticalGroup(
            mainHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainHeaderPanelLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainHeaderPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mainHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainHeaderPanelLayout.createSequentialGroup()
                        .addGroup(mainHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(searchTextField)
                            .addComponent(searchLabel)
                            .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(84, 84, 84))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainHeaderPanelLayout.createSequentialGroup()
                        .addComponent(logoImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        mainPanel.add(mainHeaderPanel);
        mainHeaderPanel.setBounds(0, 0, 6388, 220);

        mainSortPanel.setBackground(new java.awt.Color(0, 0, 0));

        sortSearchLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 24)); // NOI18N
        sortSearchLabel.setForeground(new java.awt.Color(255, 255, 255));
        sortSearchLabel.setText("Search By Labels");

        titleSortComboBox.setForeground(new java.awt.Color(0, 0, 0));
        titleSortComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Price", "Calories", "S.No", "Food Name", "Food Group", " " }));

        sortTypeComboBox.setForeground(new java.awt.Color(0, 0, 0));
        sortTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Low to High", "High to Low" }));

        sortButton.setText("Filter");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainSortPanelLayout = new javax.swing.GroupLayout(mainSortPanel);
        mainSortPanel.setLayout(mainSortPanelLayout);
        mainSortPanelLayout.setHorizontalGroup(
            mainSortPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainSortPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sortSearchLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(titleSortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sortButton)
                .addContainerGap(7, Short.MAX_VALUE))
        );
        mainSortPanelLayout.setVerticalGroup(
            mainSortPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainSortPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainSortPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleSortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortSearchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        mainPanel.add(mainSortPanel);
        mainSortPanel.setBounds(40, 560, 640, 63);

        mainBgimgLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hellswok/resources/mainPanelImage.jpeg"))); // NOI18N
        mainPanel.add(mainBgimgLabel);
        mainBgimgLabel.setBounds(0, -270, 1800, 1210);

        getContentPane().add(mainPanel);
        mainPanel.setBounds(0, 0, 1920, 1080);

        welcomePanel.setBackground(new java.awt.Color(255, 255, 255));
        welcomePanel.setPreferredSize(new java.awt.Dimension(1920, 1080));
        welcomePanel.setLayout(null);

        welcomePanel2.setBackground(new java.awt.Color(0, 0, 0));
        welcomePanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 8));

        welcomeButton.setBackground(new java.awt.Color(0, 0, 0));
        welcomeButton.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 36)); // NOI18N
        welcomeButton.setForeground(new java.awt.Color(255, 255, 255));
        welcomeButton.setText("Welcome");
        welcomeButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        welcomeButton.setContentAreaFilled(false);
        welcomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                welcomeButtonActionPerformed(evt);
            }
        });

        welcomeLabel.setBackground(new java.awt.Color(0, 0, 0));
        welcomeLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 1, 100)); // NOI18N
        welcomeLabel.setForeground(new java.awt.Color(255, 255, 255));
        welcomeLabel.setText("Hells Wok");

        javax.swing.GroupLayout welcomePanel2Layout = new javax.swing.GroupLayout(welcomePanel2);
        welcomePanel2.setLayout(welcomePanel2Layout);
        welcomePanel2Layout.setHorizontalGroup(
            welcomePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(welcomePanel2Layout.createSequentialGroup()
                .addGroup(welcomePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(welcomePanel2Layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(welcomeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(welcomePanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        welcomePanel2Layout.setVerticalGroup(
            welcomePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(welcomePanel2Layout.createSequentialGroup()
                .addContainerGap(259, Short.MAX_VALUE)
                .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(welcomeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(380, 380, 380))
        );

        welcomePanel.add(welcomePanel2);
        welcomePanel2.setBounds(2, 0, 495, 920);

        welcomeBgimgLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        welcomeBgimgLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hellswok/resources/Welcomeimage.jpg"))); // NOI18N
        welcomePanel.add(welcomeBgimgLabel);
        welcomeBgimgLabel.setBounds(0, 0, 1740, 940);

        getContentPane().add(welcomePanel);
        welcomePanel.setBounds(0, 0, 1920, 1080);

        addFoodPanel.setBackground(new java.awt.Color(255, 255, 255));
        addFoodPanel.setPreferredSize(new java.awt.Dimension(1920, 1080));
        addFoodPanel.setLayout(null);

        addFoodHeadingLabel.setFont(new java.awt.Font("Shree Devanagari 714", 0, 48)); // NOI18N
        addFoodHeadingLabel.setForeground(new java.awt.Color(255, 255, 255));
        addFoodHeadingLabel.setText("Please Enter New Food Data");
        addFoodPanel.add(addFoodHeadingLabel);
        addFoodHeadingLabel.setBounds(440, 60, 629, 72);

        addFoodInputPanel.setBackground(new java.awt.Color(0, 0, 0));
        addFoodInputPanel.setForeground(new java.awt.Color(255, 255, 255));

        servingSizeLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 36)); // NOI18N
        servingSizeLabel.setForeground(new java.awt.Color(255, 255, 255));
        servingSizeLabel.setText("Serving Size");

        priceLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 36)); // NOI18N
        priceLabel.setForeground(new java.awt.Color(255, 255, 255));
        priceLabel.setText("Price (USD)");

        foodNameLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 36)); // NOI18N
        foodNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        foodNameLabel.setText("Food Name");

        foodGroupLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 36)); // NOI18N
        foodGroupLabel.setForeground(new java.awt.Color(255, 255, 255));
        foodGroupLabel.setText("Food Group");

        caloriesLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 36)); // NOI18N
        caloriesLabel.setForeground(new java.awt.Color(255, 255, 255));
        caloriesLabel.setText("Calories(kcal)");

        countryLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 36)); // NOI18N
        countryLabel.setForeground(new java.awt.Color(255, 255, 255));
        countryLabel.setText("Country Of Origin");

        foodNameTextField.setFont(new java.awt.Font("Big Caslon", 0, 18)); // NOI18N
        foodNameTextField.setForeground(new java.awt.Color(0, 0, 0));
        foodNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        foodNameTextField.setBorder(null);
        foodNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foodNameTextFieldActionPerformed(evt);
            }
        });

        foodGroupTextFeild.setFont(new java.awt.Font("Big Caslon", 0, 18)); // NOI18N
        foodGroupTextFeild.setForeground(new java.awt.Color(0, 0, 0));
        foodGroupTextFeild.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        foodGroupTextFeild.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        caloriesTextField.setFont(new java.awt.Font("Big Caslon", 0, 18)); // NOI18N
        caloriesTextField.setForeground(new java.awt.Color(0, 0, 0));
        caloriesTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        caloriesTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        servingSizeTextField.setFont(new java.awt.Font("Big Caslon", 0, 18)); // NOI18N
        servingSizeTextField.setForeground(new java.awt.Color(0, 0, 0));
        servingSizeTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        servingSizeTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        priceTextField.setFont(new java.awt.Font("Big Caslon", 0, 18)); // NOI18N
        priceTextField.setForeground(new java.awt.Color(0, 0, 0));
        priceTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        priceTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        vegNonVegLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 36)); // NOI18N
        vegNonVegLabel.setForeground(new java.awt.Color(255, 255, 255));
        vegNonVegLabel.setText("Veg/Non-Veg");

        countryTextField.setFont(new java.awt.Font("Big Caslon", 0, 18)); // NOI18N
        countryTextField.setForeground(new java.awt.Color(0, 0, 0));
        countryTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        countryTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        vegRadioButton.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 18)); // NOI18N
        vegRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        vegRadioButton.setText("Vegetarian");
        vegRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vegRadioButtonActionPerformed(evt);
            }
        });

        nonVegRadioButton.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 18)); // NOI18N
        nonVegRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        nonVegRadioButton.setText("Non-Veg");
        nonVegRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nonVegRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addFoodInputPanelLayout = new javax.swing.GroupLayout(addFoodInputPanel);
        addFoodInputPanel.setLayout(addFoodInputPanelLayout);
        addFoodInputPanelLayout.setHorizontalGroup(
            addFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addFoodInputPanelLayout.createSequentialGroup()
                .addGroup(addFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addFoodInputPanelLayout.createSequentialGroup()
                        .addGroup(addFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(countryLabel)
                            .addComponent(vegNonVegLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                        .addGroup(addFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(countryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(addFoodInputPanelLayout.createSequentialGroup()
                                .addComponent(vegRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(nonVegRadioButton))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addFoodInputPanelLayout.createSequentialGroup()
                        .addGroup(addFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(foodGroupLabel)
                            .addComponent(foodNameLabel)
                            .addComponent(caloriesLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(addFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(foodNameTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(foodGroupTextFeild)
                            .addComponent(caloriesTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)))
                    .addGroup(addFoodInputPanelLayout.createSequentialGroup()
                        .addComponent(servingSizeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(servingSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addFoodInputPanelLayout.createSequentialGroup()
                        .addComponent(priceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(priceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        addFoodInputPanelLayout.setVerticalGroup(
            addFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addFoodInputPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(addFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addFoodInputPanelLayout.createSequentialGroup()
                        .addComponent(foodNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(foodGroupTextFeild, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addFoodInputPanelLayout.createSequentialGroup()
                        .addComponent(foodNameLabel)
                        .addGap(18, 18, 18)
                        .addComponent(foodGroupLabel)))
                .addGap(18, 18, 18)
                .addGroup(addFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(caloriesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caloriesLabel))
                .addGap(18, 18, 18)
                .addGroup(addFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addFoodInputPanelLayout.createSequentialGroup()
                        .addGroup(addFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(servingSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(servingSizeLabel))
                        .addGap(18, 18, 18)
                        .addComponent(priceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(priceLabel))
                .addGap(18, 18, 18)
                .addGroup(addFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(countryTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countryLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(29, 29, 29)
                .addGroup(addFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vegNonVegLabel)
                    .addComponent(vegRadioButton)
                    .addComponent(nonVegRadioButton))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        addFoodPanel.add(addFoodInputPanel);
        addFoodInputPanel.setBounds(90, 230, 610, 506);

        addFoodButton.setBackground(new java.awt.Color(0, 0, 0));
        addFoodButton.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 36)); // NOI18N
        addFoodButton.setForeground(new java.awt.Color(255, 255, 255));
        addFoodButton.setText("Add Food");
        addFoodButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));
        addFoodButton.setContentAreaFilled(false);
        addFoodButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFoodButtonActionPerformed(evt);
            }
        });
        addFoodPanel.add(addFoodButton);
        addFoodButton.setBounds(820, 620, 195, 76);

        addFoodBackButton.setBackground(new java.awt.Color(0, 0, 0));
        addFoodBackButton.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 36)); // NOI18N
        addFoodBackButton.setForeground(new java.awt.Color(255, 255, 255));
        addFoodBackButton.setText("←");
        addFoodBackButton.setToolTipText("");
        addFoodBackButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        addFoodBackButton.setContentAreaFilled(false);
        addFoodBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFoodBackButtonActionPerformed(evt);
            }
        });
        addFoodPanel.add(addFoodBackButton);
        addFoodBackButton.setBounds(90, 70, 100, 47);

        addFoodBgimgLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hellswok/resources/addFoodImage.png"))); // NOI18N
        addFoodPanel.add(addFoodBgimgLabel);
        addFoodBgimgLabel.setBounds(0, 0, 1860, 1050);

        getContentPane().add(addFoodPanel);
        addFoodPanel.setBounds(539, 1102, 841, 140);

        updateFoodPanel.setBackground(new java.awt.Color(255, 255, 255));
        updateFoodPanel.setMaximumSize(new java.awt.Dimension(1920, 1080));
        updateFoodPanel.setPreferredSize(new java.awt.Dimension(1920, 1080));
        updateFoodPanel.setLayout(null);

        updateFoodHeadingLabel.setBackground(new java.awt.Color(255, 255, 255));
        updateFoodHeadingLabel.setFont(new java.awt.Font("Shree Devanagari 714", 0, 48)); // NOI18N
        updateFoodHeadingLabel.setForeground(new java.awt.Color(255, 255, 255));
        updateFoodHeadingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateFoodHeadingLabel.setText("Update Food Data");
        updateFoodPanel.add(updateFoodHeadingLabel);
        updateFoodHeadingLabel.setBounds(520, 60, 397, 72);

        updateFoodSubHeadingLabel.setFont(new java.awt.Font("Shree Devanagari 714", 0, 24)); // NOI18N
        updateFoodSubHeadingLabel.setForeground(new java.awt.Color(255, 255, 255));
        updateFoodSubHeadingLabel.setText("Please Insert the S.No of the Food you are trying to Update");
        updateFoodPanel.add(updateFoodSubHeadingLabel);
        updateFoodSubHeadingLabel.setBounds(400, 150, 656, 37);

        updateFoodSnoTextField.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 24)); // NOI18N
        updateFoodSnoTextField.setForeground(new java.awt.Color(0, 0, 0));
        updateFoodSnoTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        updateFoodSnoTextField.setText("S.No");
        updateFoodSnoTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        updateFoodSnoTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateFoodSnoTextFieldMouseClicked(evt);
            }
        });
        updateFoodSnoTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFoodSnoTextFieldActionPerformed(evt);
            }
        });
        updateFoodPanel.add(updateFoodSnoTextField);
        updateFoodSnoTextField.setBounds(630, 210, 172, 66);

        updateFoodSnoButton.setBackground(new java.awt.Color(0, 0, 0));
        updateFoodSnoButton.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 1, 24)); // NOI18N
        updateFoodSnoButton.setForeground(new java.awt.Color(255, 255, 255));
        updateFoodSnoButton.setText("Enter");
        updateFoodSnoButton.setAutoscrolls(true);
        updateFoodSnoButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        updateFoodSnoButton.setContentAreaFilled(false);
        updateFoodSnoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFoodSnoButtonActionPerformed(evt);
            }
        });
        updateFoodPanel.add(updateFoodSnoButton);
        updateFoodSnoButton.setBounds(660, 290, 113, 42);

        updateFoodInputPanel.setBackground(new java.awt.Color(0, 0, 0));
        updateFoodInputPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        updateFoodNameTextField.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 18)); // NOI18N
        updateFoodNameTextField.setForeground(new java.awt.Color(0, 0, 0));
        updateFoodNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        updateFoodNameTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        updateFoodGroupTextField.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 18)); // NOI18N
        updateFoodGroupTextField.setForeground(new java.awt.Color(0, 0, 0));
        updateFoodGroupTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        updateFoodGroupTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        updateCaloriesTextField.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 18)); // NOI18N
        updateCaloriesTextField.setForeground(new java.awt.Color(0, 0, 0));
        updateCaloriesTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        updateCaloriesTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        updatePriceTextField.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 18)); // NOI18N
        updatePriceTextField.setForeground(new java.awt.Color(0, 0, 0));
        updatePriceTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        updatePriceTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        updateServingSizeTextField.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 18)); // NOI18N
        updateServingSizeTextField.setForeground(new java.awt.Color(0, 0, 0));
        updateServingSizeTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        updateServingSizeTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        updateCountryTextField.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 18)); // NOI18N
        updateCountryTextField.setForeground(new java.awt.Color(0, 0, 0));
        updateCountryTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        updateCountryTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        updateVegNonvegTextField.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 18)); // NOI18N
        updateVegNonvegTextField.setForeground(new java.awt.Color(0, 0, 0));
        updateVegNonvegTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        updateVegNonvegTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        updateVegNonvegLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 18)); // NOI18N
        updateVegNonvegLabel.setForeground(new java.awt.Color(255, 255, 255));
        updateVegNonvegLabel.setText("Veg/Non-Veg");

        updateFoodNameLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 18)); // NOI18N
        updateFoodNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        updateFoodNameLabel.setText("Food Name");

        updateFoodGroupLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 18)); // NOI18N
        updateFoodGroupLabel.setForeground(new java.awt.Color(255, 255, 255));
        updateFoodGroupLabel.setText("Food Group");

        updateCaloriesLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 18)); // NOI18N
        updateCaloriesLabel.setForeground(new java.awt.Color(255, 255, 255));
        updateCaloriesLabel.setText("Calories");

        updatePriceLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 18)); // NOI18N
        updatePriceLabel.setForeground(new java.awt.Color(255, 255, 255));
        updatePriceLabel.setText("Price");

        updateServingSizeLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 18)); // NOI18N
        updateServingSizeLabel.setForeground(new java.awt.Color(255, 255, 255));
        updateServingSizeLabel.setText("Serving Size");

        updateCountryLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 18)); // NOI18N
        updateCountryLabel.setForeground(new java.awt.Color(255, 255, 255));
        updateCountryLabel.setText("Country");

        updateFoodDataButton.setBackground(new java.awt.Color(0, 0, 0));
        updateFoodDataButton.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 24)); // NOI18N
        updateFoodDataButton.setForeground(new java.awt.Color(255, 255, 255));
        updateFoodDataButton.setText("Update");
        updateFoodDataButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        updateFoodDataButton.setContentAreaFilled(false);
        updateFoodDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFoodDataButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout updateFoodInputPanelLayout = new javax.swing.GroupLayout(updateFoodInputPanel);
        updateFoodInputPanel.setLayout(updateFoodInputPanelLayout);
        updateFoodInputPanelLayout.setHorizontalGroup(
            updateFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updateFoodInputPanelLayout.createSequentialGroup()
                .addGap(0, 112, Short.MAX_VALUE)
                .addGroup(updateFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateFoodNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateFoodNameLabel))
                .addGap(18, 18, 18)
                .addGroup(updateFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateFoodGroupTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateFoodGroupLabel))
                .addGap(18, 18, 18)
                .addGroup(updateFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateCaloriesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateCaloriesLabel))
                .addGap(18, 18, 18)
                .addGroup(updateFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(updateFoodDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updatePriceTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                    .addComponent(updatePriceLabel))
                .addGap(18, 18, 18)
                .addGroup(updateFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateServingSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateServingSizeLabel))
                .addGap(18, 18, 18)
                .addGroup(updateFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateCountryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateCountryLabel))
                .addGap(18, 18, 18)
                .addGroup(updateFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateVegNonvegTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateVegNonvegLabel))
                .addGap(133, 133, 133))
        );
        updateFoodInputPanelLayout.setVerticalGroup(
            updateFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updateFoodInputPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(updateFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateVegNonvegLabel)
                    .addComponent(updateFoodNameLabel)
                    .addComponent(updateFoodGroupLabel)
                    .addComponent(updateCaloriesLabel)
                    .addComponent(updatePriceLabel)
                    .addComponent(updateServingSizeLabel)
                    .addComponent(updateCountryLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateCountryTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateServingSizeTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(updateFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(updateVegNonvegTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(updateCaloriesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(updateFoodGroupTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(updateFoodNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(updatePriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(53, 53, 53)
                .addComponent(updateFoodDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(167, 167, 167))
        );

        updateFoodPanel.add(updateFoodInputPanel);
        updateFoodInputPanel.setBounds(0, 410, 1490, 220);

        updateBackButton.setBackground(new java.awt.Color(0, 0, 0));
        updateBackButton.setForeground(new java.awt.Color(255, 255, 255));
        updateBackButton.setText("Back");
        updateBackButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        updateBackButton.setContentAreaFilled(false);
        updateBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBackButtonActionPerformed(evt);
            }
        });
        updateFoodPanel.add(updateBackButton);
        updateBackButton.setBounds(65, 57, 120, 50);

        updateBgimgLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hellswok/resources/updateFoodImage.jpg"))); // NOI18N
        updateFoodPanel.add(updateBgimgLabel);
        updateBgimgLabel.setBounds(-430, -70, 1920, 1410);

        getContentPane().add(updateFoodPanel);
        updateFoodPanel.setBounds(0, 0, 1920, 1080);

        deleteFoodPanel.setBackground(new java.awt.Color(255, 255, 255));
        deleteFoodPanel.setPreferredSize(new java.awt.Dimension(1920, 1080));
        deleteFoodPanel.setLayout(null);

        deleteFoodInputPanel.setBackground(new java.awt.Color(0, 0, 0));
        deleteFoodInputPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 51), 3, true));

        deleteFoodHeadingLabel.setFont(new java.awt.Font("Big Caslon", 0, 48)); // NOI18N
        deleteFoodHeadingLabel.setForeground(new java.awt.Color(255, 51, 0));
        deleteFoodHeadingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteFoodHeadingLabel.setText("Delete Food Data");

        deleteFoodButton.setBackground(new java.awt.Color(0, 0, 0));
        deleteFoodButton.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 24)); // NOI18N
        deleteFoodButton.setForeground(new java.awt.Color(255, 0, 0));
        deleteFoodButton.setText("Delete");
        deleteFoodButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        deleteFoodButton.setContentAreaFilled(false);
        deleteFoodButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFoodButtonActionPerformed(evt);
            }
        });

        deleteFoodNameTextField.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 24)); // NOI18N
        deleteFoodNameTextField.setForeground(new java.awt.Color(255, 0, 0));
        deleteFoodNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deleteFoodNameTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 3));
        deleteFoodNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFoodNameTextFieldActionPerformed(evt);
            }
        });

        deleteFoodSnoTextField.setFont(new java.awt.Font("Bodoni 72 Oldstyle", 0, 36)); // NOI18N
        deleteFoodSnoTextField.setForeground(new java.awt.Color(255, 0, 0));
        deleteFoodSnoTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deleteFoodSnoTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 3));
        deleteFoodSnoTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFoodSnoTextFieldActionPerformed(evt);
            }
        });

        deleteFoodSnoLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 36)); // NOI18N
        deleteFoodSnoLabel.setForeground(new java.awt.Color(255, 255, 255));
        deleteFoodSnoLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        deleteFoodSnoLabel.setText("S.no ");

        deleteFoodNameLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 36)); // NOI18N
        deleteFoodNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        deleteFoodNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        deleteFoodNameLabel.setText("Food Name");

        javax.swing.GroupLayout deleteFoodInputPanelLayout = new javax.swing.GroupLayout(deleteFoodInputPanel);
        deleteFoodInputPanel.setLayout(deleteFoodInputPanelLayout);
        deleteFoodInputPanelLayout.setHorizontalGroup(
            deleteFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteFoodInputPanelLayout.createSequentialGroup()
                .addGroup(deleteFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deleteFoodInputPanelLayout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addGroup(deleteFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(deleteFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(deleteFoodInputPanelLayout.createSequentialGroup()
                                    .addGap(75, 75, 75)
                                    .addComponent(deleteFoodHeadingLabel))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deleteFoodInputPanelLayout.createSequentialGroup()
                                    .addComponent(deleteFoodSnoLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteFoodSnoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(deleteFoodInputPanelLayout.createSequentialGroup()
                                .addComponent(deleteFoodNameLabel)
                                .addGap(154, 154, 154)
                                .addComponent(deleteFoodNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(deleteFoodInputPanelLayout.createSequentialGroup()
                        .addGap(315, 315, 315)
                        .addComponent(deleteFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 152, Short.MAX_VALUE))
        );
        deleteFoodInputPanelLayout.setVerticalGroup(
            deleteFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteFoodInputPanelLayout.createSequentialGroup()
                .addGroup(deleteFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deleteFoodInputPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(deleteFoodHeadingLabel)
                        .addGap(56, 56, 56)
                        .addGroup(deleteFoodInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deleteFoodSnoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteFoodSnoLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addComponent(deleteFoodNameLabel))
                    .addGroup(deleteFoodInputPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteFoodNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(92, 92, 92)
                .addComponent(deleteFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        deleteFoodPanel.add(deleteFoodInputPanel);
        deleteFoodInputPanel.setBounds(350, 200, 810, 500);

        deleteFoodBackButton.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 48)); // NOI18N
        deleteFoodBackButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteFoodBackButton.setText("←");
        deleteFoodBackButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4));
        deleteFoodBackButton.setContentAreaFilled(false);
        deleteFoodBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFoodBackButtonActionPerformed(evt);
            }
        });
        deleteFoodPanel.add(deleteFoodBackButton);
        deleteFoodBackButton.setBounds(20, 20, 128, 50);

        deleteFoodBgimgLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hellswok/resources/deleteFoodImage.jpg"))); // NOI18N
        deleteFoodBgimgLabel.setText("jLabel23");
        deleteFoodPanel.add(deleteFoodBgimgLabel);
        deleteFoodBgimgLabel.setBounds(0, 0, 1720, 1080);

        getContentPane().add(deleteFoodPanel);
        deleteFoodPanel.setBounds(0, 0, 1920, 1080);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        addFoodPanel.setVisible(true);
        mainPanel.setVisible(false);
        updateFoodInputPanel.setVisible(false);
    }//GEN-LAST:event_addButtonActionPerformed

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed

    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        System.out.println("Before Sorting:");
        for (HellsWokModel food : searchList) {
            System.out.println(food.getFoodName());
        }

        String selectedTitle = (String) titleSortComboBox.getSelectedItem();
        String selectedSortType = (String) sortTypeComboBox.getSelectedItem();

        if (selectedTitle != null && selectedSortType != null) {
            // Sorting based on selectedField and selectedSortType using MergeSort class
            MergeSort mergeSort = new MergeSort();
            ArrayList<HellsWokModel> sortedList = 
                    mergeSort.mergeSort(searchList, selectedTitle);

            // Reverse the list in-place if "High to Low" is selected
            if ("High to Low".equals(selectedSortType)) {
                Collections.reverse(sortedList);
            }

            // Clear original searchList 
            searchList.clear();
            searchList.addAll(sortedList);

            // Update table data with the sorted list
            updateTableData(searchList);

            System.out.println("After Sorting:");
            for (HellsWokModel food : searchList) {
                System.out.println(food.getFoodName());
            }
        }
    }//GEN-LAST:event_sortButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        System.out.println("Search List Size: " + searchList.size());
        for (HellsWokModel food : searchList) {
            System.out.println(food.getFoodName());
        }

        InsertionSort insertionSort = new InsertionSort();
        searchList = insertionSort.insertionSort
        (searchList, "FoodName");

        System.out.println("Sorted List:");
        for (HellsWokModel food : searchList) {
            System.out.println(food.getFoodName());
        }

        BinarySearch workingAlgorithm = new BinarySearch();
        String name = searchTextField.getText().toLowerCase();

        // Perform binary search on the sorted list
        ArrayList<HellsWokModel> searchedModel = workingAlgorithm.binarySearch
        (searchList, name, "FoodName");

        if (searchedModel.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    StringUtil.SEARCH_ERROR, "Search Result", 
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            int i = 0;
            String message = StringUtil.buildSearchResultMessage(searchedModel);

            JOptionPane.showMessageDialog(this, message, 
                    StringUtil.SEARCH_RESULT, 
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void welcomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_welcomeButtonActionPerformed
        mainPanel.setVisible(true);
        addFoodPanel.setVisible(false);
        welcomePanel.setVisible(false);
        updateFoodInputPanel.setVisible(false);
    }//GEN-LAST:event_welcomeButtonActionPerformed

    private void vegRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vegRadioButtonActionPerformed
    }//GEN-LAST:event_vegRadioButtonActionPerformed

    private void nonVegRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nonVegRadioButtonActionPerformed
    }//GEN-LAST:event_nonVegRadioButtonActionPerformed
    // ADD BUTTON
    private void addFoodButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFoodButtonActionPerformed
        try {
            int SNo = dataTable.getRowCount() + 1;
            String foodName = foodNameTextField.getText();
            String foodGroup = foodGroupTextFeild.getText();
            int calories = Integer.parseInt(caloriesTextField.getText());
            String servingSize = servingSizeTextField.getText();
            int price = Integer.parseInt(priceTextField.getText());
            String Country = countryTextField.getText();

            validateInput
            ("Food Name", foodName, "[a-zA-Z ]+", 
                    "Food Name has to be Alphabets");
            validateInput
            ("Food Group", foodGroup, "[a-zA-Z ]+", 
                    "Food Group has to be Alphabets");
            validateInput
            ("Calories", String.valueOf(calories), "\\d+", 
                    "Calories must be a positive integer.");
            validateInput
            ("Serving Size", servingSize, "^[a-zA-Z0-9 ]+$", 
                    "Serving Size has to be Alphabets.");
            validateInput
            ("Price", String.valueOf(price), "\\d+", 
                    "Price must be a positive integer.");
            validateInput
            ("Country", Country, "[a-zA-Z ]+", 
                    "The Country has to be Alphabets.");

            if (!vegRadioButton.isSelected() && !nonVegRadioButton.isSelected()) 
            {
                throw new IllegalArgumentException(StringUtil.NEITHER);
            }

            if (vegRadioButton.isSelected() && nonVegRadioButton.isSelected()) 
            {
                throw new IllegalArgumentException(StringUtil.BOTH);
            }

            String vegNonveg = (vegRadioButton.isSelected()) ? 
                    "Veg" : "Non-Veg";

            for (HellsWokModel model : searchList) {
                if (model.getFoodName().equals(foodName)) {
                    JOptionPane.showMessageDialog(this,
                            StringUtil.EXISTING);
                    return; // Exit the method without adding the food
                }
            }

            DefaultTableModel tableModel = 
                    (DefaultTableModel) dataTable.getModel();
            tableModel.addRow(new Object[]
            {SNo, foodName, foodGroup, calories, servingSize,
                price, Country, vegNonveg});
            dataTable.setModel(tableModel);
            HellsWokModel model = new HellsWokModel(SNo, foodName, 
                    foodGroup, calories, servingSize, price, 
                    Country, vegNonveg);
            searchList.add(model);

            for (HellsWokModel food : searchList) {
                System.out.println(food.getFoodName());
            }
            String confirmationMessage = "Data added successfully:\n"
                    + "SNo: " + SNo + "\n"
                    + "Food Name: " + foodName + "\n"
                    + "Food Group: " + foodGroup + "\n"
                    + "Calories: " + calories + "\n"
                    + "Serving Size: " + servingSize + "\n"
                    + "Price: " + price + "\n"
                    + "Country: " + Country + "\n"
                    + "Type: " + vegNonveg;

            JOptionPane.showMessageDialog(this,
                    confirmationMessage, "Confirmation", 
                    JOptionPane.INFORMATION_MESSAGE);

            mainPanel.setVisible(true);
            addFoodPanel.setVisible(false);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                    StringUtil.CALORIES_PRICE_ERROR, "Error",
                    JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException e) {
            String errorMessage = e.getMessage();
            if (errorMessage != null && !errorMessage.isEmpty()) {
                JOptionPane.showMessageDialog(this, 
                        errorMessage, "Error", 
                        JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, 
                        StringUtil.VALID_FIELDS_ERROR, "Error", 
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addFoodButtonActionPerformed

    private void addFoodBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFoodBackButtonActionPerformed
        mainPanel.setVisible(true);
        welcomePanel.setVisible(false);
        updateFoodInputPanel.setVisible(false);
        addFoodPanel.setVisible(false);
    }//GEN-LAST:event_addFoodBackButtonActionPerformed

    private void foodNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foodNameTextFieldActionPerformed
    }//GEN-LAST:event_foodNameTextFieldActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        mainPanel.setVisible(false);
        welcomePanel.setVisible(false);
        addFoodPanel.setVisible(false);
        deleteFoodPanel.setVisible(true);
        updateFoodInputPanel.setVisible(false);
    }//GEN-LAST:event_removeButtonActionPerformed

    private void deleteFoodBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFoodBackButtonActionPerformed
        mainPanel.setVisible(true);
        welcomePanel.setVisible(false);
        addFoodPanel.setVisible(false);
        deleteFoodPanel.setVisible(false);
        updateFoodInputPanel.setVisible(false);
    }//GEN-LAST:event_deleteFoodBackButtonActionPerformed

    private void deleteFoodNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFoodNameTextFieldActionPerformed
    }//GEN-LAST:event_deleteFoodNameTextFieldActionPerformed

    private void deleteFoodButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFoodButtonActionPerformed
        if (deleteFoodSnoTextField.getText().isEmpty() || 
                deleteFoodNameTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                    StringUtil.SNO_FOOD_NAME_ERROR, "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        int SNo = Integer.parseInt(deleteFoodSnoTextField.getText());
        String foodName = deleteFoodNameTextField.getText();

        DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();

        HellsWokModel model = null;
        List<Integer> indicesToRemove = new ArrayList<>(); // Store indices to remove

        for (int i = tableModel.getRowCount() - 1; i >= 0; i--) {
            String tableSNo = tableModel.getValueAt(i, 0).toString();
            String tableFoodName = 
                    tableModel.getValueAt(i, 1).toString();

            if (tableSNo.equals(Integer.toString(SNo)) && 
                    tableFoodName.equals(foodName)) {

                model = searchList.get(i);

                StringBuilder message = new StringBuilder();
                message.append("S.No: ").append(tableSNo).append("\n");
                message.append("Food Name: ").append
        (tableFoodName).append("\n");

                int choice = JOptionPane.showConfirmDialog(this, 
                        StringUtil.DELETE_CONFIRMATION + message.toString(),
                        "Confirmation", JOptionPane.YES_NO_OPTION);

                if (choice == JOptionPane.YES_OPTION) {
                    tableModel.removeRow(i);
                    updateSNoColumn(tableModel);

                    indicesToRemove.add(i);

                    updateSNoColumnAr(searchList);

                    JOptionPane.showMessageDialog(this, 
                            StringUtil.DELETE_SUCCESSION, "Success", 
                            JOptionPane.INFORMATION_MESSAGE);
                }
                return; // Exit the loop 
            }
        }

        for (int index : indicesToRemove) {
            searchList.remove(index);
        }

        if (model != null) {
            searchList.add(model);
        }

        // Update S.No column for both tableModel and searchList
        updateSNoColumn(tableModel);
        updateSNoColumnAr(searchList);

        // message if the row with entered S.No and Food Name not found
        JOptionPane.showMessageDialog(this, 
                StringUtil.DATA_NOT_FOUND, "Error", 
                JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_deleteFoodButtonActionPerformed

    private void updateSNoColumnAr(ArrayList<HellsWokModel> searchList) {
        for (int i = 0; i < searchList.size(); i++) {
            HellsWokModel model = searchList.get(i);
            model.setSerialNumber(i + 1);
        }
    }

    private void updateSNoColumn(DefaultTableModel model) {
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(i + 1, i, 0);
        }
    }


    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        mainPanel.setVisible(false);
        welcomePanel.setVisible(false);
        addFoodPanel.setVisible(false);
        deleteFoodPanel.setVisible(false);
        updateFoodPanel.setVisible(true);
        updateFoodInputPanel.setVisible(false);
    }//GEN-LAST:event_updateButtonActionPerformed

    private void updateFoodSnoTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateFoodSnoTextFieldActionPerformed
    }//GEN-LAST:event_updateFoodSnoTextFieldActionPerformed

    private void updateFoodSnoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateFoodSnoButtonActionPerformed
        mainPanel.setVisible(false);
        welcomePanel.setVisible(false);
        addFoodPanel.setVisible(false);
        deleteFoodPanel.setVisible(false);
        updateFoodPanel.setVisible(true);
        updateFoodInputPanel.setVisible(true);

        String inputSNo = updateFoodSnoTextField.getText();

        DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();

        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String tableSNo = tableModel.getValueAt(i, 0).toString();

            if (tableSNo.equals(inputSNo)) {
                String foodName = tableModel.getValueAt
        (i, 1).toString();
                String foodGroup = tableModel.getValueAt
        (i, 2).toString();
                String Calories = tableModel.getValueAt
        (i, 3).toString();
                String servingSize = tableModel.getValueAt
        (i, 4).toString();
                String Price = tableModel.getValueAt
        (i, 5).toString();
                String Country = tableModel.getValueAt
        (i, 6).toString();
                String Veg = tableModel.getValueAt
        (i, 7).toString();

                updateFoodNameTextField.setText(foodName);
                updateFoodGroupTextField.setText(foodGroup);
                updateCaloriesTextField.setText(Calories);
                updateServingSizeTextField.setText(servingSize);
                updatePriceTextField.setText(Price);
                updateCountryTextField.setText(Country);
                updateVegNonvegTextField.setText(Veg);

                return;
            }
        }

        JOptionPane.showMessageDialog(this, 
                StringUtil.SNO_ERROR, "Error", 
                JOptionPane.ERROR_MESSAGE);
        updateFoodInputPanel.setVisible(false);
    }//GEN-LAST:event_updateFoodSnoButtonActionPerformed

    private void updateFoodDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateFoodDataButtonActionPerformed

        try {
            int updatedSNo = Integer.parseInt
        (updateFoodSnoTextField.getText());
            String updatedFoodName = updateFoodNameTextField.getText();
            String updatedFoodGroup = updateFoodGroupTextField.getText();
            int updatedCalories = Integer.parseInt
        (updateCaloriesTextField.getText());
            String updatedServingSize = updateServingSizeTextField.getText();
            int updatedPrice = Integer.parseInt
        (updatePriceTextField.getText());
            String updatedCountry = updateCountryTextField.getText();
            String updatedVegNonveg = updateVegNonvegTextField.getText();

            DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();

            if (updatedFoodName.isEmpty() && updatedFoodGroup.isEmpty() &&
                    updatedServingSize.isEmpty() && updatedCountry.isEmpty()) {
                throw new IllegalArgumentException(StringUtil.EMPTY_FEILDS);
            }

            validateInput("Food Name", updatedFoodName,
                    "[a-zA-Z ]+", 
                    "Food Name is required and cannot contain Numbers.");
            validateInput("Food Group", updatedFoodGroup, 
                    "[a-zA-Z ]+", 
                    "Food Group is required and cannot contain Numbers.");
            validateInput("Calories", 
                    String.valueOf(updatedCalories), 
                    "\\d+", 
                    "Calories must be a positive integer.");
            validateInput("Serving Size", updatedServingSize,
                    "^[a-zA-Z0-9 ]+$", 
                    "Serving Size field is not filled or contains invalid characters.");
            validateInput("Price", String.valueOf(updatedPrice), 
                    "\\d+", "Price must be a positive integer.");
            validateInput("Country", updatedCountry, 
                    "[a-zA-Z ]+", 
                    "Country field is required and has to be a string.");

            if (updatedVegNonveg.isEmpty()) {
                throw new IllegalArgumentException
        (StringUtil.INVALID_SELECTION);
            } else if (!updatedVegNonveg.matches
        ("(?i)(veg|non-veg)")) {
                throw new IllegalArgumentException
        (StringUtil.INVALID_SELECTION);
            }

            boolean isFoodNameChanged = false;

            for (HellsWokModel model : searchList) {
                if (model.getSerialNumber() == updatedSNo) {
                    String oldFoodName = model.getFoodName();

                    model.setFoodName(updatedFoodName);
                    model.setFoodGroup(updatedFoodGroup);
                    model.setCalories(updatedCalories);
                    model.setServingSize(updatedServingSize);
                    model.setPrice(updatedPrice);
                    model.setCountryOfOrigin(updatedCountry);
                    model.setVegOrNonVeg(updatedVegNonveg);

                    // Check if Food Name is changed
                    if (!oldFoodName.equals(updatedFoodName)) {
                        // Check for duplicate Food Name
                        for (int j = 0; j < tableModel.getRowCount(); j++) {
                            String tableFoodName = tableModel.getValueAt
        (j, 1).toString();
                            if (tableFoodName.equals(updatedFoodName)) {
                                // Handle the case where the new Food Name is a duplicate
                                JOptionPane.showMessageDialog(this,
                                        StringUtil.DUPLICATE_FOODNAME);
                                return; // Exit the method without updating the table
                            }
                        }
                        isFoodNameChanged = true;
                    }

                    for (int i = 0; i < tableModel.getRowCount(); i++) {
                        int tableSNo = Integer.parseInt
        (tableModel.getValueAt(i, 0).toString());

                        if (tableSNo == updatedSNo) {

                            HellsWokModel model1 = searchList.get(i);
                            tableModel.setValueAt
        (updatedFoodName, i, 1);
                            tableModel.setValueAt
        (updatedFoodGroup, i, 2);
                            tableModel.setValueAt
        (updatedCalories, i, 3);
                            tableModel.setValueAt
        (updatedServingSize, i, 4);
                            tableModel.setValueAt
        (updatedPrice, i, 5);
                            tableModel.setValueAt
        (updatedCountry, i, 6);
                            tableModel.setValueAt
        (updatedVegNonveg, i, 7);

                            searchList.set(i, model1);

                            dataTable.repaint();
                            dataTable.setModel(tableModel);

                            break;
                        }
                    }
                }
            }

            if (!isFoodNameChanged) {

                JOptionPane.showMessageDialog(this, 
                        StringUtil.UPDATE_SUCCESS);

                mainPanel.setVisible(true);
                updateFoodPanel.setVisible(false);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                    StringUtil.CALORIES_PRICE_ERROR, "Error", 
                    JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException e) {
            String errorMessage = e.getMessage();
            if (errorMessage != null && !errorMessage.isEmpty()) {
                JOptionPane.showMessageDialog(this, 
                        errorMessage, "Error", 
                        JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, 
                        StringUtil.VALID_FIELDS_ERROR, "Error", 
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_updateFoodDataButtonActionPerformed

    private void updateBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBackButtonActionPerformed
        mainPanel.setVisible(true);
        welcomePanel.setVisible(false);
        addFoodPanel.setVisible(false);
        deleteFoodPanel.setVisible(false);
        updateFoodPanel.setVisible(false);
        updateFoodInputPanel.setVisible(false);
    }//GEN-LAST:event_updateBackButtonActionPerformed

    private void updateFoodSnoTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateFoodSnoTextFieldMouseClicked
        updateFoodSnoTextField.setText("");
    }//GEN-LAST:event_updateFoodSnoTextFieldMouseClicked

    private void deleteFoodSnoTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFoodSnoTextFieldActionPerformed
    }//GEN-LAST:event_deleteFoodSnoTextFieldActionPerformed

    public void getDataTable() {
        int row = dataTable.getRowCount();

        for (int i = 0; i < row; i++) {
            HellsWokModel model = new HellsWokModel(
                    Integer.parseInt
        (dataTable.getValueAt(i, 0).toString()),
                    dataTable.getValueAt(i, 1).toString(),
                    dataTable.getValueAt(i, 2).toString(),
                    Integer.parseInt
        (dataTable.getValueAt(i, 3).toString()),
                    dataTable.getValueAt(i, 4).toString(),
                    Integer.parseInt
        (dataTable.getValueAt(i, 5).toString()),
                    dataTable.getValueAt(i, 6).toString(),
                    dataTable.getValueAt(i, 7).toString()
            );
            searchList.add(model);
        }
    }

    private void updateTableData(ArrayList<HellsWokModel> searchList) {
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        model.setRowCount(0);  // Clear existing rows

        for (HellsWokModel rowData : searchList) {
            model.addRow(new Object[]{
                rowData.getSerialNumber(),
                rowData.getFoodName(),
                rowData.getFoodGroup(),
                rowData.getCalories(),
                rowData.getServingSize(),
                rowData.getPrice(),
                rowData.getCountryOfOrigin(),
                rowData.getVegOrNonVeg()
            });
        }

    }

    /**
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HellsWok.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HellsWok.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HellsWok.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HellsWok.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HellsWok().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addFoodBackButton;
    private javax.swing.JLabel addFoodBgimgLabel;
    private javax.swing.JButton addFoodButton;
    private javax.swing.JLabel addFoodHeadingLabel;
    private javax.swing.JPanel addFoodInputPanel;
    private javax.swing.JPanel addFoodPanel;
    private javax.swing.JLabel caloriesLabel;
    private javax.swing.JTextField caloriesTextField;
    private javax.swing.JLabel countryLabel;
    private javax.swing.JTextField countryTextField;
    private javax.swing.JTable dataTable;
    private javax.swing.JButton deleteFoodBackButton;
    private javax.swing.JLabel deleteFoodBgimgLabel;
    private javax.swing.JButton deleteFoodButton;
    private javax.swing.JLabel deleteFoodHeadingLabel;
    private javax.swing.JPanel deleteFoodInputPanel;
    private javax.swing.JLabel deleteFoodNameLabel;
    private javax.swing.JTextField deleteFoodNameTextField;
    private javax.swing.JPanel deleteFoodPanel;
    private javax.swing.JLabel deleteFoodSnoLabel;
    private javax.swing.JTextField deleteFoodSnoTextField;
    private javax.swing.JLabel foodGroupLabel;
    private javax.swing.JTextField foodGroupTextFeild;
    private javax.swing.JLabel foodNameLabel;
    private javax.swing.JTextField foodNameTextField;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JLabel logoImageLabel;
    private javax.swing.JLabel mainBgimgLabel;
    private javax.swing.JPanel mainHeaderPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel mainSortPanel;
    private javax.swing.JPanel navigatorPanel;
    private javax.swing.JRadioButton nonVegRadioButton;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField priceTextField;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JLabel servingSizeLabel;
    private javax.swing.JTextField servingSizeTextField;
    private javax.swing.JButton sortButton;
    private javax.swing.JLabel sortSearchLabel;
    private javax.swing.JComboBox<String> sortTypeComboBox;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JComboBox<String> titleSortComboBox;
    private javax.swing.JButton updateBackButton;
    private javax.swing.JLabel updateBgimgLabel;
    private javax.swing.JButton updateButton;
    private javax.swing.JLabel updateCaloriesLabel;
    private javax.swing.JTextField updateCaloriesTextField;
    private javax.swing.JLabel updateCountryLabel;
    private javax.swing.JTextField updateCountryTextField;
    private javax.swing.JButton updateFoodDataButton;
    private javax.swing.JLabel updateFoodGroupLabel;
    private javax.swing.JTextField updateFoodGroupTextField;
    private javax.swing.JLabel updateFoodHeadingLabel;
    private javax.swing.JPanel updateFoodInputPanel;
    private javax.swing.JLabel updateFoodNameLabel;
    private javax.swing.JTextField updateFoodNameTextField;
    private javax.swing.JPanel updateFoodPanel;
    private javax.swing.JButton updateFoodSnoButton;
    private javax.swing.JTextField updateFoodSnoTextField;
    private javax.swing.JLabel updateFoodSubHeadingLabel;
    private javax.swing.JLabel updatePriceLabel;
    private javax.swing.JTextField updatePriceTextField;
    private javax.swing.JLabel updateServingSizeLabel;
    private javax.swing.JTextField updateServingSizeTextField;
    private javax.swing.JLabel updateVegNonvegLabel;
    private javax.swing.JTextField updateVegNonvegTextField;
    private javax.swing.JLabel updatedataLabel;
    private javax.swing.JLabel vegNonVegLabel;
    private javax.swing.JRadioButton vegRadioButton;
    private javax.swing.JLabel welcomeBgimgLabel;
    private javax.swing.JButton welcomeButton;
    private javax.swing.JLabel welcomeLabel;
    private javax.swing.JPanel welcomePanel;
    private javax.swing.JPanel welcomePanel2;
    // End of variables declaration//GEN-END:variables
}
